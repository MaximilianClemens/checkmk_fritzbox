#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-


factory_settings['fritzbox_smarthome_default_levels'] = {
    'present': 1,
    'hkr': {
        'hkr_bat_always': False,
        'hkr_warn' : {
            'hkr_bat_below' : 30,
            'hkr_diff_soll': 5,
            'hkr_flags': [True, True, False]
        },
        'hkr_crit' : {
            'hkr_bat_below' : 20,
            'hkr_diff_soll': 8,
            'hkr_flags': [True, True, False]
        },
    },
    'switch': {},
    'powermeter': {},
    'temperature': {},
    'humidity': {
        'humidity_crit':  {
            'humidity_high': 70,
            'humidity_low': 30
        },
        'humidity_warn':  {
            'humidity_high': 60,
            'humidity_low': 40
        }
    }
}


def nested_update(d, u):
    for k, v in u.items():
        if isinstance(v, collections.Mapping):
            d[k] = nested_update(d.get(k, {}), v)
        else:
            d[k] = v
    return d

def parse_fritzbox_smarthome(info):
    devices = {}
    current_device_id = None

    for line in info:
        fullline = ' '.join(line)
        if fullline.startswith('id='):
            current_device_id = fullline.split('=')[1]
            devices[current_device_id] = {}
            continue
        else:
            group = fullline.split('|')[0]
            item = fullline.split('|')[1].split('=')[0]
            value = fullline.split('|')[1].split('=')[1]
            if group not in devices[current_device_id].keys():
                devices[current_device_id][group] = {}
            devices[current_device_id][group][item] = value

    return devices

def smarthome_helper_hkr(data, params):
    data['hkr']['tist'] = float(data['hkr']['tist'])/2.0
    data['hkr']['tsoll'] = float(data['hkr']['tsoll'])/2.0
    data['hkr']['absenk'] = float(data['hkr']['absenk'])/2.0
    data['hkr']['komfort'] = float(data['hkr']['komfort'])/2.0

    check_status = 0
    msg_data = []
    perf_data = []

    if (int(data['hkr']['summeractive']) == 0):
        msg_data.append('Thermostat Temperature {}°C (Should: {}°C)'.format(data['hkr']['tist'], data['hkr']['tsoll']))
    else:
        msg_data.append('Thermostat Temperature {}°C (Summer-Mode)'.format(data['hkr']['tist']))

    tist = data['hkr']['tist']
    if 'temperature' in data.keys():
        # use Temperature Sensor if given (refernced value)
        temperature_celsius = float(data['temperature']['celsius'])/10.0
        temperature_offset = float(data['temperature']['offset'])/10.0
        tist = temperature_celsius
        #perf_data.append(('temperature_celsius', temperature_celsius))
        #perf_data.append(('temperature_offset', temperature_offset))

    diff = (data['hkr']['tsoll']-tist)
    if diff < 0:
        diff = diff *-1

    perf_data.append(('hkr_windowopenactiv', data['hkr']['windowopenactiv']))
    perf_data.append(('hkr_battery', data['hkr']['battery'],
        params['hkr_warn']['hkr_bat_below'],
        params['hkr_crit']['hkr_bat_below'], 0, 100))

    #perf_data.append(('hkr_tist', data['hkr']['tist']))
    if (not data['hkr']['summeractive']):
        perf_data.append(('hkr_tsoll', data['hkr']['tsoll']))
    else:
        perf_data.append(('hkr_tsoll', 0))

    perf_data.append(('hkr_absenk', data['hkr']['absenk']))
    perf_data.append(('hkr_komfort', data['hkr']['komfort']))

    perf_data.append(('ref_temperature', tist))
    bat_added = False

    if (not data['hkr']['summeractive']):
        if float(params['hkr_crit']['hkr_diff_soll']) < diff:
            check_status = 2 if check_status < 2 else check_status
            msg_data.append('Difference to High ({})'.format(diff))
        elif float(params['hkr_warn']['hkr_diff_soll']) < diff:
            check_status = 1 if check_status < 1 else check_status
            msg_data.append('Difference to High ({})'.format(diff))

    if float(params['hkr_crit']['hkr_bat_below']) > float(data['hkr']['battery']):
        check_status = 2 if check_status < 2 else check_status
        msg_data.append('Battery low ({}%)!'.format(data['hkr']['battery']))
        bat_added = True
    elif float(params['hkr_warn']['hkr_bat_below']) > float(data['hkr']['battery']):
        check_status = 1 if check_status < 1 else check_status
        msg_data.append('Battery low ({}%)!'.format(data['hkr']['battery']))
        bat_added = True

    if params['hkr_crit']['hkr_flags'][0] and data['hkr']['errorcode'] != str(0):
        check_status = 2 if check_status < 2 else check_status
        msg_data.append('Errorcode: {}'.format(data['hkr']['errorcode']))
    elif params['hkr_warn']['hkr_flags'][0] and data['hkr']['errorcode'] != str(0):
        check_status = 1 if check_status < 1 else check_status
        msg_data.append('Errorcode: {}'.format(data['hkr']['errorcode']))

    if params['hkr_crit']['hkr_flags'][1] and data['hkr']['batterylow'] != str(0):
        check_status = 2 if check_status < 2 else check_status
        msg_data.append('Batterywarning ({}%)'.format(data['hkr']['battery']))
        bat_added = True
    elif params['hkr_warn']['hkr_flags'][1] and data['hkr']['batterylow'] != str(0):
        check_status = 1 if check_status < 1 else check_status
        msg_data.append('Batterywarning ({}%)'.format(data['hkr']['battery']))
        bat_added = True

    if not bat_added and params['hkr_bat_always']:
        msg_data.append('Battery at {}%'.format(data['hkr']['battery']))

    if params['hkr_crit']['hkr_flags'][2] and data['hkr']['windowopenactiv'] != str(0):
        check_status = 2 if check_status < 2 else check_status
    elif params['hkr_warn']['hkr_flags'][2] and data['hkr']['windowopenactiv'] != str(0):
        check_status = 1 if check_status < 1 else check_status

    if data['hkr']['windowopenactiv'] == "1":
        msg_data.append('Window is open')

    return (msg_data, perf_data, check_status)

def smarthome_helper_powermeter(data, params):

    data['powermeter']['power'] = float(data['powermeter']['power'])/1000
    data['powermeter']['energy'] = float(data['powermeter']['energy'])/1000
    data['powermeter']['voltage'] = float(data['powermeter']['voltage'])/1000

    check_status = 0
    msg_data = []
    perf_data = []

    perf_data.append(('powermeter_power', data['powermeter']['power'])) # Leistung
    perf_data.append(('powermeter_energy', data['powermeter']['energy'])) # Verbauch (consumption)
    perf_data.append(('powermeter_voltage', data['powermeter']['voltage'])) # Spannung
    msg_data.append('Power: {}W, Consumption: {}kWh, Voltage: {}V'.format(data['powermeter']['power'], data['powermeter']['energy'], data['powermeter']['voltage']))

    return (msg_data, perf_data, check_status)

def smarthome_helper_temperature(data, params):

    check_status = 0
    msg_data = []
    perf_data = []

    temperature_celsius = float(data['temperature']['celsius'])/10.0
    temperature_offset = float(data['temperature']['offset'])/10.0
    
    perf_data.append(('temperature_celsius', temperature_celsius))
    perf_data.append(('temperature_offset', temperature_offset*-1))
    #perf_data.append(('temperature_real', (temperature_celsius+(temperature_offset*-1))))

    return (msg_data, perf_data, check_status)

def smarthome_helper_humidity(data, params):

    check_status = 0
    msg_data = []
    perf_data = []

    humidity = int(data['humidity']['rel_humidity'])

    if int(params['humidity_crit']['humidity_high']) < humidity: # High crit
        check_status = 2 if check_status < 2 else check_status
        msg_data.append('Humidity is {}% (to high!)'.format(humidity))
    elif int(params['humidity_crit']['humidity_low']) > humidity: # Low crit
        check_status = 2 if check_status < 2 else check_status
        msg_data.append('Humidity is {}% (to low!)'.format(humidity))
    elif int(params['humidity_warn']['humidity_high']) < humidity: # High warn
        check_status = 1 if check_status < 1 else check_status
        msg_data.append('Humidity is {}% (to high!)'.format(humidity))
    elif int(params['humidity_warn']['humidity_low']) > humidity: # Low warn
        check_status = 1 if check_status < 1 else check_status
        msg_data.append('Humidity is {}% (to low!)'.format(humidity))
    else:
        msg_data.append('Humidity is {}%'.format(humidity))
    
    perf_data.append(('humidity', humidity))

    return (msg_data, perf_data, check_status)

def smarthome_helper_switch(data, params):

    check_status = 0
    msg_data = []
    perf_data = []

    switch_status = 'ON' if data['switch']['state'] == str(1) else 'OFF'
    msg_data.append('State: {} ({})'.format(switch_status, data['switch']['mode']))

    perf_data.append(('switch_state', data['switch']['state']))

    return (msg_data, perf_data, check_status)


def inventory_fritzbox_smarthome(info):
    devices = parse_fritzbox_smarthome(info)

    for device_key, device in devices.items():
        device_type = 'Unknown'
        fbm = int(device['base']['functionbitmask'])
        if fbm >> 0 & 1:
            device_type = 'HANFUNDevice'
        elif fbm >> 13 & 1:
            device_type = 'HANFUNUnit'
        elif fbm >> 4 & 1:
            device_type = 'AlarmSensor'
        elif fbm >> 5 & 1:
            device_type = 'Button'
        elif fbm >> 6 & 1:
            device_type = 'Thermostat'
        elif fbm >> 9 & 1:
            device_type = 'Switch'
        elif fbm >> 7 & 1:
            device_type = 'Powermeter'
        elif fbm >> 10 & 1:
            device_type = 'DECTRepeater'
        elif fbm >> 8 & 1:
            device_type = 'TemperatureSensor'
        elif fbm >> 11 & 1:
            device_type = 'Microphone'
        elif fbm >> 17 & 1:
            device_type = 'Light'
        elif fbm >> 2 & 1:
            device_type = 'Light'
        yield ('{} {} {}'.format(device_key, device_type, device['base']['name']), None)

def check_fritzbox_smarthome(item, params, info):
    devices = parse_fritzbox_smarthome(info)

    #prepared params

    pparams = {}
    pparams = nested_update(pparams, factory_settings['fritzbox_smarthome_default_levels'])
    if params:
        pparams = nested_update(pparams, params)

    device = None
    msg_data = []
    perf_data = []
    check_status = 0

    # Find current device
    for device_key, device_n in devices.items():
        if item.startswith(device_key + " "):
            device = device_n
            break

    if not device:
        return 3, 'DEVICE NOT FOUND'

    if int(device['base']['present']) == 0:
        if int(pparams['present']) == 1: #WARN
            check_status = 1 if check_status < 1 else check_status
        if int(pparams['present']) == 2: #CRIT
            check_status = 2 if check_status < 2 else check_status
        msg_data.append('Not Present')

    msg_data.append('{} {} (FW: {})'.format(device['base']['manufacturer'], device['base']['productname'], device['base']['fwversion']))

    if int(device['base']['present']) != 0:
        fbm = int(device['base']['functionbitmask'])
        if fbm >> 0 & 1: #HANFUNDevice
            pass
        if fbm >> 4 & 1: #AlarmSensor
            #alert
            pass
        if fbm >> 5 & 1: #Taster
            pass
        if fbm >> 6 & 1: #Thermostat
            r = smarthome_helper_hkr(device, pparams['hkr'])
            msg_data.extend(r[0])
            perf_data.extend(r[1])
            check_status = r[2] if check_status < r[2] else check_status
        if fbm >> 9 & 1: #Schaltsteckdose
            r = smarthome_helper_switch(device, pparams['switch'])
            msg_data.extend(r[0])
            perf_data.extend(r[1])
            check_status = r[2] if check_status < r[2] else check_status
        if fbm >> 7 & 1: #Powermeter
            r = smarthome_helper_powermeter(device, pparams['powermeter'])
            msg_data.extend(r[0])
            perf_data.extend(r[1])
            check_status = r[2] if check_status < r[2] else check_status
        if fbm >> 8 & 1: #TemperatureSensor
            r = smarthome_helper_temperature(device, pparams['temperature'])
            msg_data.extend(r[0])
            perf_data.extend(r[1])
            check_status = r[2] if check_status < r[2] else check_status
        if fbm >> 10 & 1: #DECTRepeater
            pass
        if fbm >> 11 & 1: #Microphone
            pass
        if fbm >> 13 & 1: #HANFUNUnit
            pass

        if 'humidity' in device.keys():
            # seems related for functionbit 5 only (AVMButton)
            # so this may change in a future release
            r = smarthome_helper_humidity(device, pparams['humidity'])
            msg_data.extend(r[0])
            perf_data.extend(r[1])
            check_status = r[2] if check_status < r[2] else check_status

    return check_status, ', '.join(msg_data), perf_data

check_info['fritzbox_smarthome'] = {
    'inventory_function'       : inventory_fritzbox_smarthome,
    'check_function'           : check_fritzbox_smarthome,
    'service_description'      : 'SmartDevice %s',
    'group'                    : 'fritzbox_smarthome',
    'default_levels_variable'  : 'fritzbox_smarthome_default_levels',
    'has_perfdata'             : True,
}
