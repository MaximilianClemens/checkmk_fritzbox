#!/usr/bin/python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-


import getopt, sys, socket, traceback, re, pprint, ssl
from urllib.request import urlopen
import argparse
import xml.etree.ElementTree as ET
import hashlib

def parse_args():
    parser = argparse.ArgumentParser(description='Check_MK Fritz!Box Smarthome Agent')
    parser.add_argument('host', help='Host name or IP address of your Fritz!Box')
    parser.add_argument('username')
    parser.add_argument('password')

    parser.add_argument('--debug', action='store_true', default=False,
        help='Debug mode: let Python exceptions come through')

    parser.add_argument('--port', nargs='?', type=int, default=80)
    parser.add_argument('--ignore_ssl', action='store_true', default=False)
    parser.add_argument('--protocol', nargs='?', choices=['http', 'https'], default='http')
    args = parser.parse_args()

    return args

def check_fritzbox_smarthome(args):
    base_address = '%s://%s:%d' % (args.protocol, args.host, args.port)

    ctx = ssl.create_default_context()
    if args.ignore_ssl:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE

    # CALL /login_sid.lua
    # and grab challenge
    response = urlopen(base_address + '/login_sid.lua', context=ctx)
    if args.password:
        xml_login = ET.fromstring(response.read())
        challenge = xml_login.find('Challenge').text
        blocktime = int(xml_login.find('BlockTime').text)
        if blocktime > 0:
            sys.stdout.write('<<<fritzbox_smarthome>>>')
            sys.stdout.write('Login blocked for %d secs' % blocktime)
            raise Exception('Login blocked for %d secs' % blocktime)

        # create challenge_response (hash with md5: '<challenge>-<password>')
        # TODO: check if challenge is PBKDF2 (startswith $2)
        digest = hashlib.md5()
        digest.update(challenge.encode('utf-16le'))
        digest.update('-'.encode('utf-16le'))
        digest.update(args.password.encode('utf-16le'))

        challenge_response = challenge + '-' + digest.hexdigest()

        # CALL /login_sid.lua?username=<username>&response=<challenge_response>
        # and grab sessionid
        if args.username:
            response = urlopen(base_address + '/login_sid.lua?username=%s&response=%s' % (args.username, challenge_response), context=ctx)
        else:
            response = urlopen(base_address + '/login_sid.lua?response=%s' % (challenge_response), context=ctx)

    xml_login_solve = ET.fromstring(response.read())
    sessionid = xml_login_solve.find('SID').text

    blocktime = int(xml_login_solve.find('BlockTime').text)
    if blocktime > 0:
        raise Exception('Login blocked for %d secs\n' % blocktime)

    if args.password and sessionid == '0000000000000000':
        raise Exception('Check credentials\n')

    # Write check header
    sys.stdout.write('<<<fritzbox_smarthome>>>\n')

    # CALL /webservices/homeautoswitch.lua?switchcmd=getdevicelistinfos&sid=<SID>
    # and convert response to check output
    response = urlopen(base_address + '/webservices/homeautoswitch.lua?switchcmd=getdevicelistinfos&sid=%s' % (sessionid), context=ctx)
    response_read = response.read()
    if args.debug:
        sys.stdout.write('Raw XML:\n')
        sys.stdout.write(response_read)

    xml_devicelist = ET.fromstring(response_read)
    for device in xml_devicelist.findall('device'):
        sys.stdout.write('id=%s\n' % device.get('id'))
        sys.stdout.write('base|functionbitmask=%s\n' % device.get('functionbitmask'))
        sys.stdout.write('base|fwversion=%s\n' % device.get('fwversion'))
        sys.stdout.write('base|identifier=%s\n' % device.get('identifier').replace(' ',''))
        sys.stdout.write('base|manufacturer=%s\n' % device.get('manufacturer'))
        sys.stdout.write('base|productname=%s\n' % device.get('productname').replace(' ',''))
        sys.stdout.write('base|present=%s\n' % device.find('present').text)
        sys.stdout.write('base|name=%s\n' % device.find('name').text.encode('ascii','ignore').decode('ascii'))
        #sys.stdout.write('humidity|rel_humidity=35\n') # test

        for subelement in device.findall('*'):
            if subelement.tag == 'name':
                continue
            if subelement.tag == 'present':
                continue
            for detailelement in subelement.findall('*'):
                sys.stdout.write('%s|%s=%s\n' % (subelement.tag, detailelement.tag, detailelement.text))

if __name__ == '__main__':
    args = parse_args()
    try:
        check_fritzbox_smarthome(args)
    except:
        if args.debug:
            raise
        sys.stderr.write('fritzbox_smarthome\n %s\n' % traceback.format_exc())
        sys.exit(2)
